/*! \file araStructures.h
  \brief Contains the definitions of all the structures used to store 
  and move ARA data and stuff.
    
  Some simple definitions of the structures that we'll use to store 
  ARA data.

  June 2010  ped@m2-consult.com

  Copyright: M2 Consulting, 2010
*/

#ifndef ARA_STRUCTURES_H
#define ARA_STRUCTURES_H
#include "araDefines.h"

#define ARA_STRUCTURES_VERSION 1

//Enumerations

//!  The PriorityCode
/*!
  Unused, or largely unused.
*/
typedef enum {
    PRI_FORCED = 0,
    PRI_CALIB = 1,
    PRI_1 = 1,
    PRI_2,
    PRI_3,
    PRI_4,
    PRI_TIMEOUT,
    PRI_6, 
    PRI_7,
    PRI_8,
    PRI_PAYLOAD
} PriorityCode;

///////////////////////////////////////////////////////////////////////////
//Structures
///////////////////////////////////////////////////////////////////////////

//!  The Generic Header
/*!
  This is the 16 byte header that prefaces all ANITA data. The PacketCode_t 
  tells one what kind of packet it is, and the checksum can be used to
  validate the data.
*/
typedef struct {
    unsigned short numBytes;
    unsigned char verId;
  //    unsigned int checksum;
} GenericHeader_t;

//!  The trigger monitor I/O struct
/*!
  Contains all sorts of useful info
  about trigger patterns, deadTime, trigger time and trigger type.
*/
typedef struct {
  //!  The trigger type
  /*!
       bit 0 - 0x01 - Self trigger (i.e., RF trig)
       bit 1 - 0x02 - SMB trigger (PPS trigger from Ru clock) [disabled as firmware does not support it]
       bit 2 - 0x04 - Soft trigger (i.e., strobe from the DAQ)
       bit 6 - 0x40 - DAQ soft trigger (i.e., synchronous trigger generated by DAQ)
       bit 7 - 0x80 - DAQ random trigger (i.e., poisson distributed trigger generated by DAQ)
  */
  unsigned char trigType;     ///<Trig type bit masks
  unsigned short ppsNum;      ///< 1PPS
  unsigned short deadTime1;   ///< LSW of 10MHz counter for deadtime measurement
  unsigned short deadTime2;   ///< MSW of 10MHz counter for deadtime measurement
  unsigned short trigPattern; // trigger pattern: bits 0-8 - facet triggers | bit 9 - deep L1 | bit 10 - shallow L1 | bit 11 - unused | bit 12 - global trigger
  unsigned short rovdd[3];    // [0] - LSW of Rb clock counter | [1] - MSW of Rb clock counter | [2] - DAC voltage for LAB C
  unsigned short rcoCount[3]; // RCO counter for LAB chips
} AraTriggerMonitorStruct_t;

//!  The channel header
/*!
  Contains useful info like which channel it is, which LABRADOR chip and when
  the HITBUS (the write pointer wraparound) is.
*/
typedef struct {
  //!  Channel Id
  /*!
    chan + 9*LAB3 (0-8 is LAB3_A, ... 18-26 are LAB3_C)
  */
    unsigned char chanId;   // chan+9*LAB3
  //!  chip id bitmask
  /*!
    0:1  LABRADOR chip
    2 RCO
    3 HITBUS wrap
    4-7 HITBUS offset
  */
    unsigned char chipIdFlag; // Bits 0,1 chipNum; Bit 3 hitBus wrap; 4-7 hitBusOff
  //!  First sample of the hitbus 
  /*!
    The last sample in the waveform is [firstHitbus-1] --unless wrapped.
    Otherwise it runs from firstHitbus+1 to lastHitbus-1 inclusive
  */
    unsigned char firstHitbus; // If wrappedHitbus=0 data runs, lastHitbus+1
  //!  Last sample of the hitbus
  /*!
    The first sample in the waveform is [lastHitbus+1] -- unless wrapped.
    Otherwise it runs from firstHitbus+1 to lastHitbus-1 inclusive
  */
    unsigned char lastHitbus; //to firstHitbus-1 inclusive

} AraRawRFChannelHeader_t;

//!  A complete RF channel
/*!
  A complete RF channel  (header + waveform)
*/
typedef struct {
    AraRawRFChannelHeader_t header;
    unsigned short data[MAX_NUMBER_SAMPLES];
} RFChannelFull_t;

//!  A complete pedestal subtracted RF channel
/*!
  A complete pedestal subtracted RF channel. UNUSED at the moment
*/
typedef struct {
    AraRawRFChannelHeader_t header;
    short xMax;
    short xMin;
    float mean; ///<Filled by pedestalLib
    float rms; ///<Filled by pedestalLib
    short data[MAX_NUMBER_SAMPLES]; ///<Pedestal subtracted and 11bit data
} RFChannelPedSubbed_t;

//!  The temperatures
/*!
  The onboard temperatue readout
*/
typedef struct {
  unsigned short temp[8]; ///< 
} TemperatureDataStruct_t;

//!  The RF power
/*!
  The RF power readout
*/
typedef struct {
  unsigned short discone[8]; ///< 
  unsigned short batwing[8]; ///< 
} RFPowerDataStruct_t;

//!  The DAC settings
/*!
  The DAC setting
*/
typedef struct {
  unsigned short dac[6][4]; ///< 
} DACDataStruct_t;

//!  Scaler data
/*!
  Raw scaler data
*/
typedef struct {    
  unsigned short discone[8];
  unsigned short batPlus[8];
  unsigned short batMinus[8];
  unsigned short trigL1[12];
  unsigned short global;
} SimpleScalerStruct_t;




//!  On board pedestal struct
/*!
  On board pedestal struct
*/
typedef struct {
    unsigned char chanId;   ///< chan+9*nChip
    unsigned short chipEntries;
    float pedMean[MAX_NUMBER_SAMPLES];
    float pedRMS[MAX_NUMBER_SAMPLES]; 
} LabChipChannelPedStruct_t;


////////////////////////////////////////////////////////////////////////////
//Telemetry Structs (may be used for onboard storage)
////////////////////////////////////////////////////////////////////////////

//!  ARA Event Header 
/*!
  ARA Event Header, contains all kinds of fun information about the event
  including times, trigger patterns, event numbers and error words
*/
typedef struct {
  unsigned int unixTime;       ///< unix UTC sec
  unsigned int unixTimeUs;     ///< unix UTC microsec 

  //!  GPS timestamp
  /*!
     the GPS fraction of second (in ns) 
     (for the X events per second that get 
     tagged with it, note it now includes
     second offset from unixTime)
  */
  int gpsSubTime;    
  unsigned int eventNumber;    ///< Global event number 
  unsigned short calibStatus;   ///< Were we flashing the pulser? 
  unsigned char priority; ///< priority and other
  //!  Error Flag
  /*!
    Bit 1 means sync slip between TURF and software
    Bit 2 is sync slip between SURF 1 and software
    Bit 3 is sync slip between SURF 10 and SURF 1
    Bit 4 is non matching TURF test pattern
    Bit 5 is startBitGood (1 is good, 0 is bad);
    Bit 6 is stopBitGood (1 is good, 0 is bad);
    Bit 7-8 TURFIO photo shutter output
  */
  unsigned char errorFlag; 
  //unsigned char surfSlipFlag; ///< Sync Slip between SURF 2-9 and SURF 1
  
} AraEventHeader_t;


//!  Raw waveform packet
/*!
  Raw waveform packet, we nromally send down encoded packets, but have the option to send them down raw
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
    RFChannelFull_t waveform;
} RawWaveformPacket_t;

//! Pedsubbed Waveform packet
/*!
  Pedestal subtracted waveform packet, we nromally send down encoded packets, but have the option to send them down raw

*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
    unsigned int whichPeds;
    RFChannelPedSubbed_t waveform;
} PedSubbedWaveformPacket_t;

//!  Raw RF wavefom packet
/*!
  Raw RF waveform packet, we normally send down encoded packets, but have the option to send them down raw
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
    RFChannelFull_t waveform[CHANNELS_PER_CHIP];
} RawRFPacket_t;

//!  Pedestal subtracted RF wavefom packet
/*!
  Pedestal subtracted RF waveform packet, we normally send down encoded packets, but have the option to send them down raw
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
    unsigned int whichPeds;
    RFChannelPedSubbed_t waveform[CHANNELS_PER_CHIP];
} PedSubbedRFPacket_t;


//!  Encoded RF Packet header -- Telemetered
/*!
  Encoded RF Packet header, precedes the encoded data
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
} EncodedRFPacketHeader_t;

//! Encoded PedSubbed Packet Header
/*!
  Encoded PedSubbed Packet Header, precedes the encoded waveform data.
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int eventNumber;
    unsigned int whichPeds;
} BaseWavePacketHeader_t;

//! Hk Data Struct
/*!
  The main housekeeping data structure
*/
typedef struct {    
  TemperatureDataStruct_t temp;
  RFPowerDataStruct_t rfPow;
  DACDataStruct_t dac;
  SimpleScalerStruct_t scaler;
} AraHkDataStruct_t;

typedef struct {
  unsigned int unixTime;
  unsigned int unixTimeUs;
  unsigned int eventNumber;
  unsigned int errorFlag;
} AraHkDataHeader_t;

//! Pedestal Block
/*!
  Pedestal Block
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int unixTimeStart;
    unsigned int unixTimeEnd;
    LabChipChannelPedStruct_t chan[NUM_DIGITIZED_CHANNELS];
} FullLabChipPedStruct_t;


/////////////////////////////////////////////////////////////////////////////
// On-board structs
////////////////////////////////////////////////////////////////////////////

//! Raw event format 
/*!
  Raw event format
*/
typedef struct {
  GenericHeader_t gHdr;
  AraEventHeader_t hd;
  //  unsigned int eventNumber;    /* Global event number */
  RFChannelFull_t channel[NUM_DIGITIZED_CHANNELS];
  AraTriggerMonitorStruct_t trig;
  AraHkDataStruct_t hk;
} AraEventBody_t;

//! Raw housekeeping event format 
/*!
  Raw housekeeping event format
*/

typedef struct {
  GenericHeader_t gHdr;
  AraHkDataHeader_t hd;
  AraTriggerMonitorStruct_t trig;
  AraHkDataStruct_t hk;
} AraHkBody_t;


//! Pedestal subtracted event format  
/*!
  Pedestal subtracted event format
*/
typedef struct {
  GenericHeader_t gHdr;
  unsigned int eventNumber;    /* Global event number */
  unsigned int whichPeds; ///<whichPedestals did we subtract
  RFChannelPedSubbed_t channel[NUM_DIGITIZED_CHANNELS];
  AraHkDataStruct_t hk;
} PedSubbedEventBody_t;

//! GPS Event Timestamp  
/*!
  GPS Event Timestamp
*/
typedef struct {
    unsigned int unixTime;
    unsigned int subTime;
} GpsSubTime_t;

////////////////////////////////////////////////////////////////////////////
//Prioritizer Utility Structs
///////////////////////////////////////////////////////////////////////////
/// @cond 
#ifndef DOXYGEN_SHOULD_SKIP_THIS


//!  Queue Stuff
/*!
  Number of links in the event and housekeeping telemetry queues
*/
typedef struct {
  unsigned short eventLinks[NUM_PRIORITIES]; ///<10 Priorities
  unsigned short hkLinks[21]; ///<Needs to be finalised once everything is settled
} QueueStruct_t;

//!  Process Information
/*!
  Process Information the time used and memory used by ARA processess
*/
typedef struct {
  unsigned int utime[NUM_PROCESSES];
  unsigned int stime[NUM_PROCESSES];
  unsigned int vsize[NUM_PROCESSES];
} ProcessInfo_t;


//! Run Start Block
/*!
  Run start block
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int unixTime; ///<Start time
    unsigned int eventNumber; ///<Start eventNumber
    unsigned int runNumber; ///<Run number
} RunStart_t;


// these are syntactic sugar to help us keep track of bit shifts 
typedef int Fixed3_t; ///<rescaled integer left shifted 3 bits 
typedef int Fixed6_t; ///<rescaled integer left shifted 6 bits 
typedef int Fixed8_t; ///<rescaled integer left shifted 8 bits 


/*    FOR THREE STRUCTS THAT FOLLOW
      valid samples==-1 prior to unwinding 
*/

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     int data[MAX_NUMBER_SAMPLES];
     int valid_samples; 
} LogicChannel_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     Fixed3_t data[MAX_NUMBER_SAMPLES];
     Fixed3_t baseline;
     short valid_samples;
} TransientChannel3_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     Fixed6_t data[MAX_NUMBER_SAMPLES];
     short valid_samples;
} TransientChannel6_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     Fixed8_t data[MAX_NUMBER_SAMPLES];
     Fixed8_t baseline;
     short valid_samples;
} TransientChannel8_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     float data[MAX_NUMBER_SAMPLES];
     short valid_samples;
} TransientChannelF_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     float data[MAX_NUMBER_SAMPLES];
     short valid_samples;
     float RMSall;
     float RMSpre;
} TransientChannelFRMS_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     TransientChannel3_t ch[NUM_DIGITIZED_CHANNELS]; 
} AnitaTransientBody3_t; /* final corrected transient type 
			    used to calculate power */
//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     TransientChannel6_t ch[NUM_DIGITIZED_CHANNELS]; 
} AnitaPowerBody6_t; /* power from squaring an AnitaTransientBody3 */

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     TransientChannel8_t ch[NUM_DIGITIZED_CHANNELS]; 
} AnitaTransientBody8_t; /* used for pedestal subtraction, unwrapping, 
			    averaging, and gain correction */
//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     TransientChannelF_t ch[NUM_DIGITIZED_CHANNELS]; 
} AnitaTransientBodyF_t;

//! Prioritizer utility  
/*!
  Prioritizer utility
*/
typedef struct {
     TransientChannel6_t S0,S1,S2,S3;
} AnitaStokes6_t;
/// @endcond 
#endif //DOXYGEN_SHOULD_SKIP_THIS

#endif /* ARA_STRUCTURES_H */
